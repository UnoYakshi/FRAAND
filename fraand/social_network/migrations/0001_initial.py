# Generated by Django 4.0 on 2022-05-21 20:57

import datetime
from django.db import migrations, models
import django.db.models.constraints
import django.db.models.deletion
import taggit.managers
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('auth', '0012_alter_user_first_name_max_length'),
        ('taggit', '0005_auto_20220424_2025'),
    ]

    operations = [
        migrations.CreateModel(
            name='Deal',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, verbose_name='updated')),
                ('from_user_uid', models.UUIDField()),
                ('to_user_uid', models.UUIDField()),
                ('item_uid', models.UUIDField()),
                ('due_date', models.DateTimeField(default=datetime.datetime(2022, 6, 4, 20, 57, 46, 398745))),
                ('status', models.IntegerField(choices=[(1, 'Initiated'), (2, 'Pending'), (3, 'Completed'), (4, 'Failed'), (5, 'Error')], default=1)),
            ],
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(allow_unicode=True, max_length=100, unique=True, verbose_name='slug')),
                ('name', models.CharField(max_length=64, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='UUIDTaggedItem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.UUIDField(db_index=True, verbose_name='object ID')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_tagged_items', to='contenttypes.contenttype', verbose_name='content type')),
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(app_label)s_%(class)s_items', to='taggit.tag')),
            ],
            options={
                'verbose_name': 'Tag',
                'verbose_name_plural': 'Tags',
            },
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='created')),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True, verbose_name='updated')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('public', models.BooleanField(default=True)),
                ('city', models.CharField(default='Innopolis, RU', max_length=255)),
                ('owner_uid', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='auth.user')),
                ('tags', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', through='social_network.UUIDTaggedItem', to='taggit.Tag', verbose_name='Tags')),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='images/')),
                ('default', models.BooleanField(default=False)),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='social_network.item')),
            ],
        ),
        migrations.AddConstraint(
            model_name='deal',
            constraint=models.UniqueConstraint(deferrable=django.db.models.constraints.Deferrable['DEFERRED'], fields=('from_user_uid', 'to_user_uid', 'item_uid'), name='unique_deal'),
        ),
    ]
